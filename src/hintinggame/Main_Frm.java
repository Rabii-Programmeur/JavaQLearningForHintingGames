/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hintinggame;

import com.mysql.jdbc.Connection;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.Timer;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author pc
 */
public class Main_Frm extends javax.swing.JFrame {

    /**
     * Creates new form Main_Frm
     */
    
    Timer tmr, bestTmr;
    
    int[][] cordonees_x = {
        {74, 249, 424, 599},
        {54, 194, 334, 474, 614},
        {44, 161, 277, 394, 511, 627},
        {34, 134, 234, 334, 434, 534, 634},
        {27, 114, 202, 289, 377, 464, 552, 639}
    };
    
    int[][] cordonees_y = {
        {34, 134, 234, 334},
        {24, 104, 184, 264, 344},
        {18, 85, 151, 218, 285, 351},
        {12, 69, 126, 183, 240, 297, 355},
        {8, 58, 108, 158, 208, 258, 308, 358}
    };
    
    int[][] h_obs_cordonees_x = {
        {26, 201, 376, 551},
        {26, 166, 306, 446, 586},
        {26, 143, 260, 377, 494, 611},
        {26, 126, 226, 326, 426, 526, 626},
        {26, 113, 200, 287, 375, 463, 550, 638}
    };
    
    int[][] h_obs_cordonees_y = {
        {106, 206, 306},
        {86, 166, 246, 326},
        {72, 139, 206, 273, 340},
        {63, 120, 177, 234, 291, 348},
        {56, 106, 156, 206, 256, 306, 356}
    };
    
    int[][] v_obs_cordonees_x = {
        {180, 355, 530, 705},
        {146, 286, 426, 566, 706},
        {123, 240, 356, 473, 590, 706},
        {105, 205, 305, 405, 505, 605, 705},
        {92, 179, 267, 354, 442, 529, 617, 704}
    };
    
    int[][] v_obs_cordonees_y = {
        {20, 120, 220, 320},
        {20, 100, 180, 260, 340},
        {20, 87, 153, 220, 287, 353},
        {20, 77, 134, 191, 249, 306, 363},
        {20, 70, 120, 170, 220, 270, 320, 370}
    };
    
    public int intMazeWidth, intMazeLength, intxPos, intyPos, trgxPos, trgyPos;
    
    private static final String USERNAME = "root";
    private static final String PASSWORD = "";
    private static final String CONN_STRING = "jdbc:mysql://localhost/learninghintinggame";
    
    Environnement envr;
    Qlearning qlearn  = new Qlearning();
    
    String gamma, alpha, pr, cr, smr, nbmaxI, nbmaxE;
    
    float totalRewards = 0;
    int episode = 1;
    int interact = 1;
    float floatAlpha, floatE;
    
    private boolean timerStarted = false;
    private boolean bestTmrStarted = false;
    
    DecimalFormat df = new DecimalFormat(); 
    
    int[] lastMove = new int[501];
    int[] bestMove = new int[501];
    int bestInteractions = 500;
    int bestActualState = 1;
    float bestTotalRewards = 0;
    int bEpisode = 1;
    int bInteract = 1;
    
    int stOne;
    Random rand = new Random();
    float nb;
    int a;
    float rwrd;
    
    ImageIcon u_imgFlech, d_imgFlech, l_imgFlech, r_imgFlech;
    
    int actXpos, actYpos;
    
    public Main_Frm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        mouse_lbl = new javax.swing.JLabel();
        cheese_lbl = new javax.swing.JLabel();
        hObs3_lbl = new javax.swing.JLabel();
        hObs2_lbl = new javax.swing.JLabel();
        hObs1_lbl = new javax.swing.JLabel();
        vObs2_lbl = new javax.swing.JLabel();
        vObs1_lbl = new javax.swing.JLabel();
        vObs3_lbl = new javax.swing.JLabel();
        h_calque_lbl = new javax.swing.JLabel();
        v_calque_lbl = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        actionlbl = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        rewardtxt = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        episodestxt = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        intracttxt = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        terminaltextpane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(null);

        mouse_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mouse_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hintinggame/Mouse.png"))); // NOI18N
        jPanel1.add(mouse_lbl);
        mouse_lbl.setBounds(70, 340, 80, 70);

        cheese_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cheese_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hintinggame/Cheese.png"))); // NOI18N
        jPanel1.add(cheese_lbl);
        cheese_lbl.setBounds(420, 340, 80, 70);

        hObs3_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hintinggame/h_7_obstacle.png"))); // NOI18N
        jPanel1.add(hObs3_lbl);
        hObs3_lbl.setBounds(60, 0, 220, 30);

        hObs2_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hintinggame/h_7_obstacle.png"))); // NOI18N
        jPanel1.add(hObs2_lbl);
        hObs2_lbl.setBounds(60, 0, 240, 30);

        hObs1_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hintinggame/h_8_obstacle.png"))); // NOI18N
        jPanel1.add(hObs1_lbl);
        hObs1_lbl.setBounds(60, 0, 230, 30);

        vObs2_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vObs2_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hintinggame/v_5_obstacle.png"))); // NOI18N
        vObs2_lbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel1.add(vObs2_lbl);
        vObs2_lbl.setBounds(0, 90, 40, 210);

        vObs1_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vObs1_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hintinggame/v_8_obstacle.png"))); // NOI18N
        vObs1_lbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel1.add(vObs1_lbl);
        vObs1_lbl.setBounds(0, 90, 40, 200);

        vObs3_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        vObs3_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hintinggame/v_4_obstacle.png"))); // NOI18N
        vObs3_lbl.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jPanel1.add(vObs3_lbl);
        vObs3_lbl.setBounds(0, 90, 40, 180);

        h_calque_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        h_calque_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hintinggame/Calque_4_h.png"))); // NOI18N
        jPanel1.add(h_calque_lbl);
        h_calque_lbl.setBounds(0, 0, 750, 440);

        v_calque_lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        v_calque_lbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hintinggame/Calque_4_v.png"))); // NOI18N
        jPanel1.add(v_calque_lbl);
        v_calque_lbl.setBounds(0, 0, 750, 440);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Agent Controle", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Albertus MT", 0, 14))); // NOI18N

        jButton1.setFont(new java.awt.Font("Albertus MT", 0, 14)); // NOI18N
        jButton1.setText("Start Agent");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Albertus MT", 0, 14)); // NOI18N
        jButton3.setText("Pause");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Albertus MT", 0, 14)); // NOI18N
        jButton4.setText("Exit Game");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Albertus MT", 0, 14)); // NOI18N
        jButton2.setText("Print Qtable");
        jButton2.setToolTipText("");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        actionlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        actionlbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hintinggame/u_fleche.png"))); // NOI18N

        jButton6.setFont(new java.awt.Font("Albertus MT", 0, 14)); // NOI18N
        jButton6.setText("Best Move");
        jButton6.setToolTipText("");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(actionlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(actionlbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Albertus MT", 0, 14)); // NOI18N
        jLabel1.setText("Debuger");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Game Display", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Albertus MT", 0, 14))); // NOI18N

        rewardtxt.setFont(new java.awt.Font("Albertus MT", 0, 18)); // NOI18N
        rewardtxt.setForeground(new java.awt.Color(255, 102, 102));
        rewardtxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rewardtxt.setText("0000");
        rewardtxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 102)));

        jLabel3.setFont(new java.awt.Font("Albertus MT", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 153, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Total Rewards :");
        jLabel3.setToolTipText("");

        jLabel4.setFont(new java.awt.Font("Albertus MT", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 153, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Episode :");
        jLabel4.setToolTipText("");

        episodestxt.setFont(new java.awt.Font("Albertus MT", 0, 18)); // NOI18N
        episodestxt.setForeground(new java.awt.Color(153, 153, 255));
        episodestxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        episodestxt.setText("1");
        episodestxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));

        jLabel5.setFont(new java.awt.Font("Albertus MT", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 153, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Interaction :");
        jLabel5.setToolTipText("");

        intracttxt.setFont(new java.awt.Font("Albertus MT", 0, 18)); // NOI18N
        intracttxt.setForeground(new java.awt.Color(153, 153, 255));
        intracttxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        intracttxt.setText("1");
        intracttxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(episodestxt, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(intracttxt, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rewardtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rewardtxt, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(episodestxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(intracttxt, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane3.setBorder(null);

        terminaltextpane.setBorder(null);
        terminaltextpane.setAutoscrolls(jScrollPane2.getAutoscrolls());
        jScrollPane2.setViewportView(terminaltextpane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 757, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane2))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.setLocationRelativeTo(null);
        this.setTitle("Hinting Game Learning - Gaming");
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        vObs1_lbl.setVisible(false);
        vObs2_lbl.setVisible(false);
        vObs3_lbl.setVisible(false);
        hObs1_lbl.setVisible(false);
        hObs2_lbl.setVisible(false);
        hObs3_lbl.setVisible(false);
        
        jButton3.setEnabled(false);
        
        rewardtxt.setText(df.format(totalRewards));
        
        try {
            Image iconimage = ImageIO.read(getClass().getResource("Cheese.png"));
            this.setIconImage(iconimage);
        } catch (IOException ex) {
            Logger.getLogger(Main_Frm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        u_imgFlech = new ImageIcon(this.getClass().getResource("u_fleche.png"));
        d_imgFlech = new ImageIcon(this.getClass().getResource("d_fleche.png"));
        l_imgFlech = new ImageIcon(this.getClass().getResource("l_fleche.png"));
        r_imgFlech = new ImageIcon(this.getClass().getResource("r_fleche.png"));
        
        Connection conn = null;
        
        try {
            conn = (Connection) DriverManager.getConnection(CONN_STRING, USERNAME, PASSWORD);
            Statement stmt = null;
            ResultSet rs = null;
            
            stmt = conn.createStatement();
            appendterminal("Fetching Game Setting From DataBase ....", 1, true);
            
            if (stmt.execute("SELECT * FROM gamessettings")) {
                rs = stmt.getResultSet();
            }
            
            String rsltid, rsltl, rsltw, rsltx, rslty, rslttrgtx, rslttrgty;
            rsltid = rsltl = rsltw = rsltx = rslty = rslttrgtx = rslttrgty = "";
            
            while (rs.next()) {
                rsltid = rs.getString(1);
                rsltl = rs.getString(2);
                rsltw = rs.getString(3);
                rsltx = rs.getString(4);
                rslty = rs.getString(5);
                rslttrgtx = rs.getString(6);
                rslttrgty = rs.getString(7);
            }
            
            appendterminal("Last Game Id : ", 0, false);
            appendterminal(rsltid, 5, true);
            appendterminal("Maze Length : ", 0, false);
            appendterminal(rsltl, 5, true);
            appendterminal("Maze Width : ", 0, false);
            appendterminal(rsltw, 5, true);
            appendterminal("Initial Pos-Robot X : ", 0, false);
            appendterminal(rsltx, 5, true);
            appendterminal("Initial Pos-Robot Y : ", 0, false);
            appendterminal(rslty, 5, true);
            appendterminal("Target Pos X : ", 0, false);
            appendterminal(rslttrgtx, 5, true);
            appendterminal("Target Pos Y : ", 0, false);
            appendterminal(rslttrgty, 5, true);
            appendterminal("Done!\n\r", 0, true);
            
            appendterminal("Update Environnement Settings ....", 1, true);
            appendterminal("Length and Width....", 0, true);
            String vImageName = "Calque_" + rsltw + "_v.png";
            Image imgv = new ImageIcon(this.getClass().getResource(vImageName)).getImage();
            v_calque_lbl.setIcon(new ImageIcon(imgv));
            String hImageName = "Calque_" + rsltl + "_h.png";
            Image imgh = new ImageIcon(this.getClass().getResource(hImageName)).getImage();
            h_calque_lbl.setIcon(new ImageIcon(imgh));
            appendterminal("Initial Pos-Robot....", 0, true);
            
            intMazeWidth = Integer.parseInt(rsltw) - 4;
            intMazeLength = Integer.parseInt(rsltl) - 4;

            intxPos = Integer.parseInt(rsltx) - 1;
            intyPos = Integer.parseInt(rslty) - 1;
            
            appendterminal("Target Position....", 0, true);
            
            trgxPos = Integer.parseInt(rslttrgtx) - 1;
            trgyPos = Integer.parseInt(rslttrgty) - 1;

            cheese_lbl.setLocation(cordonees_x[intMazeWidth][trgxPos], cordonees_y[intMazeLength][trgyPos]);
            mouse_lbl.setLocation(cordonees_x[intMazeWidth][intxPos], cordonees_y[intMazeLength][intyPos]);
            
            appendterminal("Done!\n\r", 0, true);
            
            appendterminal("Fetching Obstacles From DataBase ....", 1, true);
            
            String hObstacleImageName = "h_" + rsltw + "_obstacle.png";
            Image obsimgh = new ImageIcon(this.getClass().getResource(hObstacleImageName)).getImage();
            hObs1_lbl.setIcon(new ImageIcon(obsimgh));
            hObs2_lbl.setIcon(new ImageIcon(obsimgh));
            hObs3_lbl.setIcon(new ImageIcon(obsimgh));

            String vObstacleImageName = "v_" + rsltl + "_obstacle.png";
            Image obsimgv = new ImageIcon(this.getClass().getResource(vObstacleImageName)).getImage();
            vObs1_lbl.setIcon(new ImageIcon(obsimgv));
            vObs2_lbl.setIcon(new ImageIcon(obsimgv));
            vObs3_lbl.setIcon(new ImageIcon(obsimgv));
            
            int v_obs_count = 0;
            int h_obs_count = 0;
            int[][] verticalObs , horizontalObs;
            horizontalObs = new int[9][9];
            verticalObs = new int[9][9];
            
            for(int[] t : verticalObs) {
                for(int k : t) {
                    k = 0;
                }
            }
            
            for(int[] t : horizontalObs) {
                for(int k : t) {
                    k = 0;
                }
            }
            
            if (stmt.execute("SELECT * FROM obstacles WHERE game_id = " + rsltid)) {
                rs = stmt.getResultSet();
            }
            
            int resultsCount = 0;
            
            while (rs.next()) {
                if(rs.getString(3).equals("H")) {
                    switch (h_obs_count) {
                        case 0:
                            horizontalObs[rs.getInt(4)][rs.getInt(5)] = 1;
                            hObs1_lbl.setLocation(h_obs_cordonees_x[intMazeWidth][rs.getInt(4)-1], h_obs_cordonees_y[intMazeLength][rs.getInt(5)-1]);
                            hObs1_lbl.setVisible(true);
                            h_obs_count++;
                            appendterminal("Horizontal [", 0, false);
                            appendterminal(rs.getString(4), 5, false);
                            appendterminal(", ", 0, false);
                            appendterminal(rs.getString(5), 5, false);
                            appendterminal("]", 0, true);
                            break;
                        case 1:
                            horizontalObs[rs.getInt(4)][rs.getInt(5)] = 1;
                            hObs2_lbl.setLocation(h_obs_cordonees_x[intMazeWidth][rs.getInt(4)-1], h_obs_cordonees_y[intMazeLength][rs.getInt(5)-1]);
                            hObs2_lbl.setVisible(true);
                            h_obs_count++;
                            appendterminal("Horizontal [", 0, false);
                            appendterminal(rs.getString(4), 5, false);
                            appendterminal(", ", 0, false);
                            appendterminal(rs.getString(5), 5, false);
                            appendterminal("]", 0, true);
                            break;
                        case 2:
                            horizontalObs[rs.getInt(4)][rs.getInt(5)] = 1;
                            hObs3_lbl.setLocation(h_obs_cordonees_x[intMazeWidth][rs.getInt(4)-1], h_obs_cordonees_y[intMazeLength][rs.getInt(5)-1]);
                            hObs3_lbl.setVisible(true);
                            h_obs_count++;
                            appendterminal("Horizontal [", 0, false);
                            appendterminal(rs.getString(4), 5, false);
                            appendterminal(", ", 0, false);
                            appendterminal(rs.getString(5), 5, false);
                            appendterminal("]", 0, true);
                            break;
                        default:
                            break;
                    }
                } else if(rs.getString(3).equals("V")) {
                    switch (v_obs_count) {
                        case 0:
                            verticalObs[rs.getInt(4)][rs.getInt(5)] = 1;
                            vObs1_lbl.setLocation(v_obs_cordonees_x[intMazeWidth][rs.getInt(4)-1], v_obs_cordonees_y[intMazeLength][rs.getInt(5)-1]);
                            vObs1_lbl.setVisible(true);
                            v_obs_count++;
                            appendterminal("Vertical [", 0, false);
                            appendterminal(rs.getString(4), 5, false);
                            appendterminal(", ", 0, false);
                            appendterminal(rs.getString(5), 5, false);
                            appendterminal("]", 0, true);
                            break;
                        case 1:
                            verticalObs[rs.getInt(4)][rs.getInt(5)] = 1;
                            vObs2_lbl.setLocation(v_obs_cordonees_x[intMazeWidth][rs.getInt(4)-1], v_obs_cordonees_y[intMazeLength][rs.getInt(5)-1]);
                            vObs2_lbl.setVisible(true);
                            v_obs_count++;
                            appendterminal("Vertical [", 0, false);
                            appendterminal(rs.getString(4), 5, false);
                            appendterminal(", ", 0, false);
                            appendterminal(rs.getString(5), 5, false);
                            appendterminal("]", 0, true);
                            break;
                        case 2:
                            verticalObs[rs.getInt(4)][rs.getInt(5)] = 1;
                            vObs3_lbl.setLocation(v_obs_cordonees_x[intMazeWidth][rs.getInt(4)-1], v_obs_cordonees_y[intMazeLength][rs.getInt(5)-1]);
                            vObs3_lbl.setVisible(true);
                            v_obs_count++;
                            appendterminal("Vertical [", 0, false);
                            appendterminal(rs.getString(4), 5, false);
                            appendterminal(", ", 0, false);
                            appendterminal(rs.getString(5), 5, false);
                            appendterminal("]", 0, true);
                            break;
                        default:
                            break;
                    }
                }
                resultsCount++;
            }
            
            if(resultsCount != 0) {
                appendterminal(String.valueOf(resultsCount), 5, false);
                appendterminal(" Obstacles found", 0, true);
            } else {
                appendterminal("No obstacles found!", 0, true);
            }
            
            appendterminal("Done!\n\r", 0, true);
            
            appendterminal("Fetching Learning Setting From DataBase ....", 1, true);
            
            if (stmt.execute("SELECT * FROM learningsettings WHERE gameid = " + rsltid)) {
                rs = stmt.getResultSet();
            }
            
            gamma = alpha = pr = cr = smr = nbmaxI = nbmaxE = "";
            
            if (rs.next()) {
                gamma = rs.getString(2);
                alpha = rs.getString(3);
                pr = rs.getString(4);
                cr = rs.getString(5);
                smr = rs.getString(6);
                nbmaxI = rs.getString(7);
                nbmaxE = rs.getString(8);
            }
            
            appendterminal("Gamma : ", 0, false);
            appendterminal(gamma, 5, true);
            appendterminal("Alpha : ", 0, false);
            appendterminal(alpha, 5, true);
            appendterminal("Punition Reward : ", 0, false);
            appendterminal(pr, 5, true);
            appendterminal("Catch Reward : ", 0, false);
            appendterminal(cr, 5, true);
            appendterminal("Safe Move Reward : ", 0, false);
            appendterminal(smr, 5, true);
            appendterminal("Nb Max Interaction : ", 0, false);
            appendterminal(nbmaxI, 5, true);
            appendterminal("Nb Max Episodes : ", 0, false);
            appendterminal(nbmaxE, 5, true);
            
            appendterminal("Done!\n\r", 0, true);
            
            appendterminal("Initialize Environnement Class....", 1, true);
            
            envr = new Environnement(intMazeWidth+4, intMazeLength+4, intxPos+1,
                                                    intyPos+1, trgxPos+1, trgyPos+1, verticalObs, horizontalObs, Float.parseFloat(smr), Float.parseFloat(cr), Float.parseFloat(pr));
            
            appendterminal(String.valueOf(envr.stCount) + " States generated : ", 0, false);
            appendterminal("[S1 - S" + String.valueOf(envr.stCount) + "]", 5, true);
            
            appendterminal("Done!\n\r", 0, true);
            
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException sqlEx) { }
                rs = null;
            }
            if (stmt != null) {
                try {
                    stmt.close();
                } catch (SQLException sqlEx) { }
                stmt = null;
            }
            
        } catch (SQLException ex) {
            System.out.println("SQLException: " + ex.getMessage());
            System.out.println("SQLState: " + ex.getSQLState());
            System.out.println("VendorError: " + ex.getErrorCode());
        }
        df.setMaximumFractionDigits(2);
    }//GEN-LAST:event_formWindowOpened

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        appendterminal("Initialize Q-Learning Class....", 1, true);
        
        qlearn  = new Qlearning();
        
        floatAlpha = Float.parseFloat(alpha);
        floatE = 1;
        
        if(!timerStarted) {
            tmr = new Timer(1, new ActionListener () {
                    
                @Override
                public void actionPerformed(ActionEvent ae) {
                    if(episode <= Integer.parseInt(nbmaxE)) {
                        if(interact <= Integer.parseInt(nbmaxI)) {
                            stOne = envr.actualState;
                            nb = rand.nextFloat();
                            if(nb < floatE) {
                                a = rand.nextInt(4);
                            } else {
                                a = qlearn.getMaxActionRwrd(stOne);
                            }

                            rwrd = envr.moveRobot(a);
                            
                            if(interact <= 500) {
                                lastMove[interact] = a;
                            }

                            intracttxt.setText(String.valueOf(interact));
                            episodestxt.setText(String.valueOf(episode));

                            switch (a) {
                                case 0:
                                    actionlbl.setIcon(r_imgFlech);
                                    break;
                                case 1:
                                    actionlbl.setIcon(l_imgFlech);
                                    break;
                                case 2:
                                    actionlbl.setIcon(u_imgFlech);
                                    break;
                                default:
                                    actionlbl.setIcon(d_imgFlech);
                                    break;
                            }

                            actXpos = envr.cordOfStates[envr.actualState][1];
                            actYpos = envr.cordOfStates[envr.actualState][2];
                            
                            mouse_lbl.setLocation(cordonees_x[intMazeWidth][actXpos-1], cordonees_y[intMazeLength][actYpos-1]);
                            totalRewards += rwrd;
                            
                            rewardtxt.setText(df.format(totalRewards));
                            
                            qlearn.Update(stOne, envr.actualState, a, rwrd, floatAlpha, Float.parseFloat(gamma));

                            if(((trgxPos+1) == actXpos) && ((trgyPos+1) == actYpos)) {
                                //* Target Position Catched
                                envr.actualState = envr.states[intxPos+1][intyPos+1];
                                mouse_lbl.setLocation(cordonees_x[intMazeWidth][intxPos], cordonees_y[intMazeLength][intyPos]);
                                appendterminal("", 1, true);
                                appendterminal("End Episode " + String.valueOf(episode) + " in " + String.valueOf(interact) + " interactions.", 1, true);
                                appendterminal("", 1, true);
                                appendterminal("Total Reward: " + String.valueOf(totalRewards), 5, true);
                                appendterminal("Done!\n\r", 0, true);
                                
                                if(interact < bestInteractions) {
                                    for(int k = 1; k <= bestInteractions; k++) {
                                        bestMove[k] = lastMove[k];
                                    }
                                    bestInteractions = interact;
                                }
                                
                                if(episode > 500) {
                                    floatE = 0;
                                } else {
                                    floatE = floatE * (float) 0.99;
                                }
                                floatAlpha = floatAlpha * (float) 0.99;
                                totalRewards = 0;
                                episode++;
                                interact = 1;
                            } else {
                                interact++;
                            }
                        } else {
                            //* Max Nbr of Interactions Catched
                            envr.actualState = envr.states[intxPos+1][intyPos+1];
                            mouse_lbl.setLocation(cordonees_x[intMazeWidth][intxPos], cordonees_y[intMazeLength][intyPos]);
                            appendterminal("", 1, true);
                            appendterminal("End Episode " + String.valueOf(episode) + " in " + String.valueOf(interact-1) + " interactions.", 1, true);
                            appendterminal("", 1, true);
                            appendterminal("Total Reward: " + String.valueOf(totalRewards), 5, true);
                            appendterminal("Done!\n\r", 0, true);
                            if(episode > 500) {
                                floatE = 0;
                            } else {
                                floatE = floatE * (float) 0.99;
                            }
                            floatAlpha = floatAlpha * (float) 0.99;
                            totalRewards = 0;
                            episode++;
                            interact = 1;
                        }
                    } else {
                        //* Max Nbr of Episodes Catched
                        episode = 1;
                        tmr.stop();
                        if(jButton3.getText().equals("Pause")) {
                            jButton3.setText("Play");
                        }
                    }
                }
            });
            jButton3.setEnabled(true);
            timerStarted = true;
        } else {
            floatAlpha = Float.parseFloat(alpha);
            floatE = 1;
            envr.actualState = envr.states[intxPos+1][intyPos+1];
            mouse_lbl.setLocation(cordonees_x[intMazeWidth][intxPos], cordonees_y[intMazeLength][intyPos]);
            totalRewards = 0;
            episode = 1;
            interact = 1;
        }
        
        tmr.start();
        rewardtxt.setText(df.format(totalRewards));
        if(jButton3.getText().equals("Play")) {
            jButton3.setText("Pause");
        }
        
        appendterminal("Qtable Is all 0 Q[s, a]", 0, true);
        
        appendterminal("Done!\n\r", 0, true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(jButton3.getText().equals("Pause")) {
            tmr.stop();
            jButton3.setText("Play");
        } else {
            tmr.start();
            rewardtxt.setText(df.format(totalRewards));
            jButton3.setText("Pause");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        appendterminal("\n\rPrinting Qtable values ....\n\r", 1, true);
        
        for(int i = 1; i <= envr.stCount; i++) {
            String s;
            if(i < 10) s = "0" + String.valueOf(i); else s = String.valueOf(i);
            appendterminal("S" + s + " : ", 1, false);
            appendterminal("[", 0, false);
            appendterminal(df.format(qlearn.Qtable[i][0]), 5, false);
            appendterminal(", ", 0, false);
            appendterminal(df.format(qlearn.Qtable[i][1]), 5, false);
            appendterminal(", ", 0, false);
            appendterminal(df.format(qlearn.Qtable[i][2]), 5, false);
            appendterminal(", ", 0, false);
            appendterminal(df.format(qlearn.Qtable[i][3]), 5, false);
            appendterminal("]", 0, true);
        }
        
        appendterminal("\n\rDone!\n\r", 0, true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        
        appendterminal("\n\rGetting the Best Try....", 1, true);
        appendterminal("Best Nbr Interactions: " + String.valueOf(bestInteractions), 0, true);
        
        bestActualState = envr.actualState;
        bestTotalRewards = totalRewards;
        bEpisode = episode;
        bInteract = interact;
        episode = 1;
        interact = 1;
        intracttxt.setText(String.valueOf(interact));
        episodestxt.setText(String.valueOf(episode));
        
        envr.actualState = envr.states[intxPos+1][intyPos+1];
        mouse_lbl.setLocation(cordonees_x[intMazeWidth][intxPos], cordonees_y[intMazeLength][intyPos]);
        totalRewards = 0;
        rewardtxt.setText(df.format(totalRewards));
        
        if(!bestTmrStarted) {
            bestTmr = new Timer(1000, new ActionListener () {
                    
                @Override
                public void actionPerformed(ActionEvent ae) {
                    if(interact <= bestInteractions) {
                        rwrd = envr.moveRobot(bestMove[interact]);

                            switch (bestMove[interact]) {
                                case 0:
                                    actionlbl.setIcon(r_imgFlech);
                                    break;
                                case 1:
                                    actionlbl.setIcon(l_imgFlech);
                                    break;
                                case 2:
                                    actionlbl.setIcon(u_imgFlech);
                                    break;
                                default:
                                    actionlbl.setIcon(d_imgFlech);
                                    break;
                            }

                            actXpos = envr.cordOfStates[envr.actualState][1];
                            actYpos = envr.cordOfStates[envr.actualState][2];
                            
                            mouse_lbl.setLocation(cordonees_x[intMazeWidth][actXpos-1], cordonees_y[intMazeLength][actYpos-1]);
                            totalRewards += rwrd;
                            intracttxt.setText(String.valueOf(interact));
                            rewardtxt.setText(df.format(totalRewards));
                            interact++;
                    } else {
                        envr.actualState = bestActualState;
                        totalRewards = bestTotalRewards;
                        episode = bEpisode;
                        interact = bInteract;
                        intracttxt.setText(String.valueOf(interact));
                        episodestxt.setText(String.valueOf(episode));
                        actXpos = envr.cordOfStates[bestActualState][1];
                        actYpos = envr.cordOfStates[bestActualState][2];
                        mouse_lbl.setLocation(cordonees_x[intMazeWidth][actXpos-1], cordonees_y[intMazeLength][actYpos-1]);
                        rewardtxt.setText(df.format(totalRewards));
                        appendterminal("\n\rDone!\n\r", 0, true);
                        bestTmr.stop();
                    }
                }
            });
            bestTmrStarted = true;
        }
        bestTmr.start();
    }//GEN-LAST:event_jButton6ActionPerformed

    public void appendterminal(String s, int type, boolean tab) {
        
        Font font;
        switch(type) {
            case 0:
                terminaltextpane.setForeground(Color.DARK_GRAY);
                font = new Font("Verdana", Font.PLAIN, 10);
                break;
            case 1:
                terminaltextpane.setForeground(Color.BLUE);
                font = new Font("Verdana", Font.PLAIN, 10);
                break;
            default:
                terminaltextpane.setForeground(Color.ORANGE);
                font = new Font("Verdana", Font.PLAIN, 10);
                break;
        }
        terminaltextpane.setFont(font);
        
        String r;
        if(tab) r = s + "\n\r"; else r =s;
        
        try {
            
            Document doc = terminaltextpane.getDocument();
            doc.insertString(doc.getLength(), r, terminaltextpane.getStyle("default"));
            
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_Frm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_Frm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_Frm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Frm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Frm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actionlbl;
    private javax.swing.JLabel cheese_lbl;
    private javax.swing.JLabel episodestxt;
    private javax.swing.JLabel hObs1_lbl;
    private javax.swing.JLabel hObs2_lbl;
    private javax.swing.JLabel hObs3_lbl;
    private javax.swing.JLabel h_calque_lbl;
    private javax.swing.JLabel intracttxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel mouse_lbl;
    private javax.swing.JLabel rewardtxt;
    private javax.swing.JTextPane terminaltextpane;
    private javax.swing.JLabel vObs1_lbl;
    private javax.swing.JLabel vObs2_lbl;
    private javax.swing.JLabel vObs3_lbl;
    private javax.swing.JLabel v_calque_lbl;
    // End of variables declaration//GEN-END:variables

}
